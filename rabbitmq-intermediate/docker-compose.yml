version: '3.8'

services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq-intermediate
    ports:
      - "5672:5672"      # AMQP port
      - "15672:15672"    # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./infrastructure/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins
      - ./infrastructure/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - microservices

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres-intermediate
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: rabbitmq_demo
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_MULTIPLE_DATABASES: orders,inventory,payments,shipping
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init:/docker-entrypoint-initdb.d
      - ./infrastructure/postgres/conf:/etc/postgresql/conf.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: redis-intermediate
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - microservices

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: api-gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/rabbitmq_demo
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: debug
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/api-gateway/src:/app/src
      - ./shared:/app/shared
    networks:
      - microservices
    restart: unless-stopped

  # Order Service
  order-service:
    build:
      context: .
      dockerfile: services/order-service/Dockerfile
    container_name: order-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      SERVICE_NAME: order-service
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/orders
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: debug
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./services/order-service/src:/app/src
      - ./shared:/app/shared
    networks:
      - microservices
    restart: unless-stopped

  # Inventory Service
  inventory-service:
    build:
      context: .
      dockerfile: services/inventory-service/Dockerfile
    container_name: inventory-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      SERVICE_NAME: inventory-service
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/inventory
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: debug
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./services/inventory-service/src:/app/src
      - ./shared:/app/shared
    networks:
      - microservices
    restart: unless-stopped

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: services/payment-service/Dockerfile
    container_name: payment-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      SERVICE_NAME: payment-service
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/payments
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: debug
      ENCRYPTION_KEY: "your-32-char-encryption-key-here"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./services/payment-service/src:/app/src
      - ./shared:/app/shared
    networks:
      - microservices
    restart: unless-stopped

  # Shipping Service
  shipping-service:
    build:
      context: .
      dockerfile: services/shipping-service/Dockerfile
    container_name: shipping-service
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      SERVICE_NAME: shipping-service
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/shipping
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: debug
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./services/shipping-service/src:/app/src
      - ./shared:/app/shared
    networks:
      - microservices
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: services/notification-service/Dockerfile
    container_name: notification-service
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      SERVICE_NAME: notification-service
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: debug
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./services/notification-service/src:/app/src
      - ./shared:/app/shared
    networks:
      - microservices
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservices

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3333:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - microservices

volumes:
  rabbitmq_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  microservices:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
